{"ast":null,"code":"// Utility functions for React app\n\n// Authentication utilities\nexport const AuthUtils = {\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return localStorage.getItem('ticketapp_session') !== null;\n  },\n  // Get current user session\n  getSession: () => {\n    const session = localStorage.getItem('ticketapp_session');\n    return session ? JSON.parse(session) : null;\n  },\n  // Set user session\n  setSession: user => {\n    localStorage.setItem('ticketapp_session', JSON.stringify(user));\n  },\n  // Clear user session\n  clearSession: () => {\n    localStorage.removeItem('ticketapp_session');\n  },\n  // Mock authentication function\n  authenticate: (email, password) => {\n    // Mock user database\n    const users = [{\n      id: 1,\n      name: 'Admin User',\n      email: 'admin@example.com',\n      password: 'password123'\n    }, {\n      id: 2,\n      name: 'Test User',\n      email: 'test@example.com',\n      password: 'test123'\n    }];\n    const user = users.find(u => u.email === email && u.password === password);\n    if (user) {\n      // Don't store password in session\n      const {\n        password,\n        ...userSession\n      } = user;\n      AuthUtils.setSession(userSession);\n      return {\n        success: true,\n        user: userSession\n      };\n    } else {\n      return {\n        success: false,\n        message: 'Invalid email or password'\n      };\n    }\n  },\n  // Mock signup function\n  signup: (name, email, password) => {\n    // In a real app, this would make an API call\n    // For demo purposes, we'll simulate a successful signup\n    const newUser = {\n      id: Date.now(),\n      // Generate a simple ID\n      name,\n      email\n    };\n    AuthUtils.setSession(newUser);\n    return {\n      success: true,\n      user: newUser\n    };\n  }\n};\n\n// Toast notification utility\nexport const ToastUtils = {\n  show: (message, type = 'success', duration = 5000) => {\n    // Create custom event for toast\n    const event = new CustomEvent('showToast', {\n      detail: {\n        message,\n        type,\n        duration\n      }\n    });\n    document.dispatchEvent(event);\n  },\n  success: (message, duration) => {\n    ToastUtils.show(message, 'success', duration);\n  },\n  error: (message, duration) => {\n    ToastUtils.show(message, 'error', duration);\n  },\n  warning: (message, duration) => {\n    ToastUtils.show(message, 'warning', duration);\n  }\n};\n\n// Form validation utility\nexport const ValidationUtils = {\n  // Validate email format\n  isValidEmail: email => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(email);\n  },\n  // Validate required field\n  isRequired: value => {\n    return value !== null && value !== undefined && value.trim() !== '';\n  },\n  // Validate minimum length\n  minLength: (value, min) => {\n    return value.length >= min;\n  },\n  // Validate maximum length\n  maxLength: (value, max) => {\n    return value.length <= max;\n  },\n  // Validate ticket status\n  isValidStatus: status => {\n    return ['open', 'in_progress', 'closed'].includes(status);\n  }\n};\n\n// API utility for mock data operations\nexport const ApiUtils = {\n  // Mock tickets data\n  getTickets: () => {\n    // In a real app, this would fetch from an API\n    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');\n\n    // If no tickets exist, create some sample data\n    if (tickets.length === 0) {\n      const sampleTickets = [{\n        id: 1,\n        title: 'Login page not responsive',\n        description: 'The login page is not displaying correctly on mobile devices',\n        status: 'open',\n        priority: 'high',\n        createdAt: new Date(Date.now() - 86400000).toISOString(),\n        // 1 day ago\n        updatedAt: new Date(Date.now() - 86400000).toISOString()\n      }, {\n        id: 2,\n        title: 'Dashboard statistics loading slowly',\n        description: 'The dashboard is taking more than 5 seconds to load statistics',\n        status: 'in_progress',\n        priority: 'medium',\n        createdAt: new Date(Date.now() - 172800000).toISOString(),\n        // 2 days ago\n        updatedAt: new Date(Date.now() - 43200000).toISOString() // 12 hours ago\n      }, {\n        id: 3,\n        title: 'User profile update issue',\n        description: 'Users are unable to update their profile information',\n        status: 'closed',\n        priority: 'low',\n        createdAt: new Date(Date.now() - 259200000).toISOString(),\n        // 3 days ago\n        updatedAt: new Date(Date.now() - 86400000).toISOString() // 1 day ago\n      }];\n      localStorage.setItem('tickets', JSON.stringify(sampleTickets));\n      return sampleTickets;\n    }\n    return tickets;\n  },\n  // Get ticket by ID\n  getTicket: id => {\n    const tickets = ApiUtils.getTickets();\n    return tickets.find(ticket => ticket.id === parseInt(id));\n  },\n  // Create new ticket\n  createTicket: ticket => {\n    const tickets = ApiUtils.getTickets();\n    const newTicket = {\n      ...ticket,\n      id: Date.now(),\n      // Simple ID generation for demo\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    tickets.push(newTicket);\n    localStorage.setItem('tickets', JSON.stringify(tickets));\n    return newTicket;\n  },\n  // Update ticket\n  updateTicket: (id, updates) => {\n    const tickets = ApiUtils.getTickets();\n    const ticketIndex = tickets.findIndex(ticket => ticket.id === parseInt(id));\n    if (ticketIndex === -1) {\n      return null;\n    }\n    tickets[ticketIndex] = {\n      ...tickets[ticketIndex],\n      ...updates,\n      updatedAt: new Date().toISOString()\n    };\n    localStorage.setItem('tickets', JSON.stringify(tickets));\n    return tickets[ticketIndex];\n  },\n  // Delete ticket\n  deleteTicket: id => {\n    const tickets = ApiUtils.getTickets();\n    const filteredTickets = tickets.filter(ticket => ticket.id !== parseInt(id));\n    if (filteredTickets.length === tickets.length) {\n      return false; // No ticket was removed\n    }\n    localStorage.setItem('tickets', JSON.stringify(filteredTickets));\n    return true;\n  },\n  // Get ticket statistics\n  getTicketStats: () => {\n    const tickets = ApiUtils.getTickets();\n    return {\n      total: tickets.length,\n      open: tickets.filter(ticket => ticket.status === 'open').length,\n      inProgress: tickets.filter(ticket => ticket.status === 'in_progress').length,\n      closed: tickets.filter(ticket => ticket.status === 'closed').length\n    };\n  }\n};\n\n// Format date utility\nexport const DateUtils = {\n  format: (dateString, options = {}) => {\n    const date = new Date(dateString);\n    const defaultOptions = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    const mergedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    return date.toLocaleDateString(undefined, mergedOptions);\n  },\n  relativeTime: dateString => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now - date;\n    const diffSec = Math.round(diffMs / 1000);\n    const diffMin = Math.round(diffSec / 60);\n    const diffHour = Math.round(diffMin / 60);\n    const diffDay = Math.round(diffHour / 24);\n    if (diffSec < 60) {\n      return 'just now';\n    } else if (diffMin < 60) {\n      return `${diffMin} minute${diffMin > 1 ? 's' : ''} ago`;\n    } else if (diffHour < 24) {\n      return `${diffHour} hour${diffHour > 1 ? 's' : ''} ago`;\n    } else if (diffDay < 7) {\n      return `${diffDay} day${diffDay > 1 ? 's' : ''} ago`;\n    } else {\n      return DateUtils.format(dateString);\n    }\n  }\n};","map":{"version":3,"names":["AuthUtils","isAuthenticated","localStorage","getItem","getSession","session","JSON","parse","setSession","user","setItem","stringify","clearSession","removeItem","authenticate","email","password","users","id","name","find","u","userSession","success","message","signup","newUser","Date","now","ToastUtils","show","type","duration","event","CustomEvent","detail","document","dispatchEvent","error","warning","ValidationUtils","isValidEmail","re","test","isRequired","value","undefined","trim","minLength","min","length","maxLength","max","isValidStatus","status","includes","ApiUtils","getTickets","tickets","sampleTickets","title","description","priority","createdAt","toISOString","updatedAt","getTicket","ticket","parseInt","createTicket","newTicket","push","updateTicket","updates","ticketIndex","findIndex","deleteTicket","filteredTickets","filter","getTicketStats","total","open","inProgress","closed","DateUtils","format","dateString","options","date","defaultOptions","year","month","day","hour","minute","mergedOptions","toLocaleDateString","relativeTime","diffMs","diffSec","Math","round","diffMin","diffHour","diffDay"],"sources":["c:/Users/lone-DEV/OneDrive/Documents/ticket management system/react-app/src/utils/index.js"],"sourcesContent":["// Utility functions for React app\r\n\r\n// Authentication utilities\r\nexport const AuthUtils = {\r\n  // Check if user is authenticated\r\n  isAuthenticated: () => {\r\n    return localStorage.getItem('ticketapp_session') !== null;\r\n  },\r\n\r\n  // Get current user session\r\n  getSession: () => {\r\n    const session = localStorage.getItem('ticketapp_session');\r\n    return session ? JSON.parse(session) : null;\r\n  },\r\n\r\n  // Set user session\r\n  setSession: (user) => {\r\n    localStorage.setItem('ticketapp_session', JSON.stringify(user));\r\n  },\r\n\r\n  // Clear user session\r\n  clearSession: () => {\r\n    localStorage.removeItem('ticketapp_session');\r\n  },\r\n\r\n  // Mock authentication function\r\n  authenticate: (email, password) => {\r\n    // Mock user database\r\n    const users = [\r\n      { id: 1, name: 'Admin User', email: 'admin@example.com', password: 'password123' },\r\n      { id: 2, name: 'Test User', email: 'test@example.com', password: 'test123' }\r\n    ];\r\n\r\n    const user = users.find(u => u.email === email && u.password === password);\r\n    \r\n    if (user) {\r\n      // Don't store password in session\r\n      const { password, ...userSession } = user;\r\n      AuthUtils.setSession(userSession);\r\n      return { success: true, user: userSession };\r\n    } else {\r\n      return { success: false, message: 'Invalid email or password' };\r\n    }\r\n  },\r\n\r\n  // Mock signup function\r\n  signup: (name, email, password) => {\r\n    // In a real app, this would make an API call\r\n    // For demo purposes, we'll simulate a successful signup\r\n    const newUser = {\r\n      id: Date.now(), // Generate a simple ID\r\n      name,\r\n      email\r\n    };\r\n    \r\n    AuthUtils.setSession(newUser);\r\n    return { success: true, user: newUser };\r\n  }\r\n};\r\n\r\n// Toast notification utility\r\nexport const ToastUtils = {\r\n  show: (message, type = 'success', duration = 5000) => {\r\n    // Create custom event for toast\r\n    const event = new CustomEvent('showToast', {\r\n      detail: { message, type, duration }\r\n    });\r\n    document.dispatchEvent(event);\r\n  },\r\n\r\n  success: (message, duration) => {\r\n    ToastUtils.show(message, 'success', duration);\r\n  },\r\n\r\n  error: (message, duration) => {\r\n    ToastUtils.show(message, 'error', duration);\r\n  },\r\n\r\n  warning: (message, duration) => {\r\n    ToastUtils.show(message, 'warning', duration);\r\n  }\r\n};\r\n\r\n// Form validation utility\r\nexport const ValidationUtils = {\r\n  // Validate email format\r\n  isValidEmail: (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(email);\r\n  },\r\n\r\n  // Validate required field\r\n  isRequired: (value) => {\r\n    return value !== null && value !== undefined && value.trim() !== '';\r\n  },\r\n\r\n  // Validate minimum length\r\n  minLength: (value, min) => {\r\n    return value.length >= min;\r\n  },\r\n\r\n  // Validate maximum length\r\n  maxLength: (value, max) => {\r\n    return value.length <= max;\r\n  },\r\n\r\n  // Validate ticket status\r\n  isValidStatus: (status) => {\r\n    return ['open', 'in_progress', 'closed'].includes(status);\r\n  }\r\n};\r\n\r\n// API utility for mock data operations\r\nexport const ApiUtils = {\r\n  // Mock tickets data\r\n  getTickets: () => {\r\n    // In a real app, this would fetch from an API\r\n    const tickets = JSON.parse(localStorage.getItem('tickets') || '[]');\r\n    \r\n    // If no tickets exist, create some sample data\r\n    if (tickets.length === 0) {\r\n      const sampleTickets = [\r\n        {\r\n          id: 1,\r\n          title: 'Login page not responsive',\r\n          description: 'The login page is not displaying correctly on mobile devices',\r\n          status: 'open',\r\n          priority: 'high',\r\n          createdAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago\r\n          updatedAt: new Date(Date.now() - 86400000).toISOString()\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'Dashboard statistics loading slowly',\r\n          description: 'The dashboard is taking more than 5 seconds to load statistics',\r\n          status: 'in_progress',\r\n          priority: 'medium',\r\n          createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago\r\n          updatedAt: new Date(Date.now() - 43200000).toISOString() // 12 hours ago\r\n        },\r\n        {\r\n          id: 3,\r\n          title: 'User profile update issue',\r\n          description: 'Users are unable to update their profile information',\r\n          status: 'closed',\r\n          priority: 'low',\r\n          createdAt: new Date(Date.now() - 259200000).toISOString(), // 3 days ago\r\n          updatedAt: new Date(Date.now() - 86400000).toISOString() // 1 day ago\r\n        }\r\n      ];\r\n      \r\n      localStorage.setItem('tickets', JSON.stringify(sampleTickets));\r\n      return sampleTickets;\r\n    }\r\n    \r\n    return tickets;\r\n  },\r\n\r\n  // Get ticket by ID\r\n  getTicket: (id) => {\r\n    const tickets = ApiUtils.getTickets();\r\n    return tickets.find(ticket => ticket.id === parseInt(id));\r\n  },\r\n\r\n  // Create new ticket\r\n  createTicket: (ticket) => {\r\n    const tickets = ApiUtils.getTickets();\r\n    const newTicket = {\r\n      ...ticket,\r\n      id: Date.now(), // Simple ID generation for demo\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    tickets.push(newTicket);\r\n    localStorage.setItem('tickets', JSON.stringify(tickets));\r\n    \r\n    return newTicket;\r\n  },\r\n\r\n  // Update ticket\r\n  updateTicket: (id, updates) => {\r\n    const tickets = ApiUtils.getTickets();\r\n    const ticketIndex = tickets.findIndex(ticket => ticket.id === parseInt(id));\r\n    \r\n    if (ticketIndex === -1) {\r\n      return null;\r\n    }\r\n    \r\n    tickets[ticketIndex] = {\r\n      ...tickets[ticketIndex],\r\n      ...updates,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    localStorage.setItem('tickets', JSON.stringify(tickets));\r\n    return tickets[ticketIndex];\r\n  },\r\n\r\n  // Delete ticket\r\n  deleteTicket: (id) => {\r\n    const tickets = ApiUtils.getTickets();\r\n    const filteredTickets = tickets.filter(ticket => ticket.id !== parseInt(id));\r\n    \r\n    if (filteredTickets.length === tickets.length) {\r\n      return false; // No ticket was removed\r\n    }\r\n    \r\n    localStorage.setItem('tickets', JSON.stringify(filteredTickets));\r\n    return true;\r\n  },\r\n\r\n  // Get ticket statistics\r\n  getTicketStats: () => {\r\n    const tickets = ApiUtils.getTickets();\r\n    \r\n    return {\r\n      total: tickets.length,\r\n      open: tickets.filter(ticket => ticket.status === 'open').length,\r\n      inProgress: tickets.filter(ticket => ticket.status === 'in_progress').length,\r\n      closed: tickets.filter(ticket => ticket.status === 'closed').length\r\n    };\r\n  }\r\n};\r\n\r\n// Format date utility\r\nexport const DateUtils = {\r\n  format: (dateString, options = {}) => {\r\n    const date = new Date(dateString);\r\n    \r\n    const defaultOptions = {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    };\r\n    \r\n    const mergedOptions = { ...defaultOptions, ...options };\r\n    \r\n    return date.toLocaleDateString(undefined, mergedOptions);\r\n  },\r\n\r\n  relativeTime: (dateString) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffMs = now - date;\r\n    const diffSec = Math.round(diffMs / 1000);\r\n    const diffMin = Math.round(diffSec / 60);\r\n    const diffHour = Math.round(diffMin / 60);\r\n    const diffDay = Math.round(diffHour / 24);\r\n    \r\n    if (diffSec < 60) {\r\n      return 'just now';\r\n    } else if (diffMin < 60) {\r\n      return `${diffMin} minute${diffMin > 1 ? 's' : ''} ago`;\r\n    } else if (diffHour < 24) {\r\n      return `${diffHour} hour${diffHour > 1 ? 's' : ''} ago`;\r\n    } else if (diffDay < 7) {\r\n      return `${diffDay} day${diffDay > 1 ? 's' : ''} ago`;\r\n    } else {\r\n      return DateUtils.format(dateString);\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}